import { Alert, Button, Checkbox, Collapse, CollapsePanelProps, Divider, Space, Tabs, Typography } from 'antd';
import { BookOutlined, CaretRightOutlined, CheckOutlined, CopyOutlined } from '@ant-design/icons';
import { CheckboxChangeEvent } from 'antd/es/checkbox';
import React from 'react';
import useLocalStorage from '../../hooks/useLocalStorage';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';
import { Link } from 'react-router-dom';

const { Panel } = Collapse;
const { Paragraph, Text } = Typography;

const PanelAssignment03: React.FC<
  CollapsePanelProps & {
    setActiveKey: (value: string | string[] | ((val: string | string[]) => string | string[])) => void;
  }
> = props => {
  const [solutionEnabled, setSolutionEnabled] = useLocalStorage('workshop:solutionEnabled:03', false);
  const [finished, setFinished] = useLocalStorage('workshop:assignment:03', false);

  const onClick = () => {
    // e.stopPropagation();
    setFinished(true);
    props.setActiveKey('assignment:04');
  };

  return (
    <Panel
      {...props}
      extra={
        <Checkbox checked={finished} disabled>
          completed
        </Checkbox>
      }
    >
      <Tabs
        defaultActiveKey="1"
        items={[
          {
            label: 'Assignment',
            key: '1',
            children: (
              <>
                <Paragraph>
                  In the previous task, you had to write the GraphQL schema yourself using a{' '}
                  <Text code>gql template string</Text>.
                  <br />
                  To mock all queries and mutations of a GraphQL server, all operations and types need to be defined in
                  the schema (<Text italic>typedefs</Text>). Writing them manually can be a lot of work.
                  <br />
                  Fortunately, it is possible to provide our mock Apollo server with a schema based on the schema of the
                  real GraphQL server.
                </Paragraph>
                <Paragraph>
                  More information about this can be found in the documentation of Apollo Server at{' '}
                  <a
                    href="https://www.apollographql.com/docs/apollo-server/v2/testing/mocking/#mocking-a-schema-using-introspection"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    this page (v2)
                  </a>
                </Paragraph>
                <Paragraph>
                  To create this application, a{' '}
                  <a
                    href="https://www.the-guild.dev/graphql/codegen/docs/getting-started"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    GraphQL Code Generator
                  </a>{' '}
                  is already being used.
                  <br />
                  The schema generated by it can be used to create our mock Apollo server as well.
                </Paragraph>
                <Paragraph>
                  In the <Text code>package.json</Text> you can find the{' '}
                  <Text code copyable>
                    graphql-codegen:remote
                  </Text>{' '}
                  script. This script will generate a <Text code>*.generated.ts</Text> file, in which all types are
                  defined, which can be utilized in a TypeScript application.
                  <br />
                  Additionally, an <Text code>*.schema.json</Text> file is generated as an{' '}
                  <Text italic>introspection</Text> result. We can use this schema in our mock Apollo server.
                </Paragraph>
                <Divider plain />
                <Paragraph>
                  Modify <Text code>apollo-server.ts</Text> to use the generated schema as the schema for your mock
                  server.
                </Paragraph>

                <Paragraph>
                  This assignment is completed when you can run{' '}
                  <Text code copyable>
                    npm run start:apollo
                  </Text>{' '}
                  without errors.
                  <br />
                  If you now go through the various menu items, there should be no more errors displayed, and you will
                  see the default simulated values everywhere. Additionally, in the{' '}
                  <Link to="/catalog">
                    <Space>
                      <BookOutlined />
                      <Text strong>Catalog</Text>
                    </Space>
                  </Link>{' '}
                  , you should still see your own simulated response that we created in task 2.
                  <br />
                  Now is a good time to write a resolver for one or more other queries if you wish.
                  <br />
                  Remember that you don't have to write the entire response object. You only need to assign values to
                  the fields that you consider important. All other fields will be automatically filled by the mock
                  Apollo server.
                  <br />
                  <br />
                  <Collapse
                    style={{ maxWidth: '600px' }}
                    expandIcon={({ isActive }) => <CaretRightOutlined rotate={isActive ? 90 : 0} />}
                  >
                    <Panel
                      key={1}
                      header={
                        <Space>
                          I only see "Hello World" for the <Text italic>Land types</Text> instead of my data.
                        </Space>
                      }
                    >
                      Now that we are using an introspection schema to provide a schema for our mock server, it no
                      longer works to pass the <Text code>resolvers</Text> object to the{' '}
                      <Text italic>resolvers attribute</Text> of our Apollo server.
                      <br />
                      Instead, you need to assign the <Text code>resolvers</Text> object to the{' '}
                      <Text italic>mocks attribute</Text>.
                      <br />
                      Please also refer to the information in the <Text strong>More info</Text> tab for further details.
                    </Panel>
                  </Collapse>
                </Paragraph>

                <Alert
                  message={
                    <>
                      After making changes to <Text code>apollo-server.ts</Text> do not forget to restart the apollo
                      server by running{' '}
                      <Text code copyable>
                        npm run start:apollo
                      </Text>{' '}
                      again.
                    </>
                  }
                  type="info"
                  showIcon
                  style={{ marginBottom: '20px', maxWidth: '900px' }}
                />

                <Checkbox
                  checked={solutionEnabled}
                  onChange={(e: CheckboxChangeEvent) => setSolutionEnabled(e.target.checked)}
                >
                  show the solution
                </Checkbox>
                <Divider plain />
                <Button onClick={onClick} size="small" shape="round" type="primary">
                  Next
                </Button>
              </>
            ),
          },
          {
            label: 'More info',
            key: '2',
            children: (
              <>
                <Paragraph>
                  <Text strong>API</Text>
                  <br />
                  The mocking functionality in Apollo Server is provided by the <Text code>addMocksToSchema</Text>{' '}
                  function from
                  <br />
                  the <Text code>@graphql-tools/mock</Text> package. The <Text code>mocks</Text> object is directly
                  passed to the
                  <Text code>addMocksToSchema</Text> function.
                  <br />
                  Apollo Server does not support all the arguments available in <Text code>addMocksToSchema</Text>,
                  including
                  <Text code>resolvers</Text>.
                </Paragraph>
                <Paragraph>
                  <a href="https://www.graphql-tools.com/docs/mocking" target="_blank" rel="noopener noreferrer">
                    https://www.graphql-tools.com/docs/mocking
                  </a>
                </Paragraph>
              </>
            ),
          },
          {
            label: 'Solution',
            key: '3',
            disabled: !solutionEnabled,
            children: (
              <>
                <Divider orientation="left">
                  <Text
                    style={{ fontSize: '0.9rem' }}
                    copyable={{
                      text: solution,
                      icon: [
                        <Button icon={<CopyOutlined />} size="small" shape="round" type="primary">
                          copy
                        </Button>,
                        <Button icon={<CheckOutlined />} size="small" shape="round" type="primary">
                          copied
                        </Button>,
                      ],
                    }}
                    strong
                  >
                    apollo-server.ts&nbsp;&nbsp;
                  </Text>
                </Divider>
                <SyntaxHighlighter
                  customStyle={{ border: '1px lightgrey solid', fontSize: '12px' }}
                  lineNumberStyle={{ color: 'black', opacity: '0.4' }}
                  language="typescript"
                  showLineNumbers
                  style={docco}
                >
                  {solution.trim()}
                </SyntaxHighlighter>
                <Paragraph />
                <Divider plain />
                <Button onClick={onClick} size="small" shape="round" type="primary">
                  Next
                </Button>
              </>
            ),
          },
        ]}
      />
    </Panel>
  );
};

const solution = `
/**
 * This file will be used in all assignments - it will contain all the code for your mock Apollo server
 */
import { buildClientSchema } from 'graphql';
import { ApolloServer } from 'apollo-server';
import { DeepPartial } from 'ts-essentials';
import { GqlCatalogType } from '../src/graphql-schema.generated';

const introspectionResult = require('../graphql.schema.json');

const schema = buildClientSchema(introspectionResult);

/**
 * Now that we have generated the schema, we can also provide a return type
 * to the resolver function.
 * As mentioned in the solution for assignment 2, it is not necessary to create a
 * complete response object because Apollo provides default values for all undefined fields.
 * The \`DeepPartial<>\` type makes all attributes in a type optional, in this case making
 * all attributes of \`GqlCatalogType\` optional.
 */
const resolvers = {
  Query: () => ({
    catalogLandTypes: (): DeepPartial<GqlCatalogType> => {
      return {
        data: ['weiland', 'steppe', 'woestijn'],
      };
    },
  }),
};

const server = new ApolloServer({
  schema,
  mocks: resolvers,
  mockEntireSchema: false,
});

server.listen().then(({ url }) => {
  console.log(\`🚀 Server ready at \${url}\`);
});
`;

export default PanelAssignment03;
